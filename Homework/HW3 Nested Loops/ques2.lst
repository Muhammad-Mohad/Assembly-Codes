     1                                  [org 0x0100]
     2                                  
     3 00000000 EB26                    jmp start
     4                                  
     5 00000002 0100040006000000        set1: dw 1, 4, 6, 0  ; First set (ordered array with zero as terminator)
     6 0000000A 010003000500080000-     set2: dw 1, 3, 5, 8, 0  ; Second set (ordered array with zero as terminator)
     6 00000013 00                 
     7 00000014 000000000000000000-     union_set: dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ; Space for union set (max 10 elements)
     7 0000001D 000000000000000000-
     7 00000026 0000               
     8                                  
     9                                  start:
    10 00000028 BE[0200]                    mov si, set1       ; SI points to the first element of set1
    11 0000002B BF[0A00]                    mov di, set2       ; DI points to the first element of set2
    12 0000002E BB[1400]                    mov bx, union_set  ; BX points to the union_set
    13 00000031 B90A00                      mov cx, 10         ; CX = max 10 elements in union
    14                                  
    15                                  process_union:
    16                                      ; Load values from both sets
    17 00000034 8B04                        mov ax, [si]       ; Load element from set1
    18 00000036 8B15                        mov dx, [di]       ; Load element from set2
    19                                  
    20                                      ; If either element is zero, break the loop
    21 00000038 83F800                      cmp ax, 0
    22 0000003B 7438                        je set1_done
    23 0000003D 83FA00                      cmp dx, 0
    24 00000040 7445                        je set2_done
    25                                  
    26                                      ; Compare elements from set1 and set2
    27 00000042 39D0                        cmp ax, dx
    28 00000044 741A                        je equal_elements   ; If equal, insert once and increment both
    29 00000046 7C02                        jl set1_less        ; If set1 element is less, insert set1 element
    30 00000048 7F0B                        jg set2_less        ; If set2 element is less, insert set2 element
    31                                  
    32                                  set1_less:
    33                                      ; Insert set1 element and move to next
    34 0000004A 8907                        mov [bx], ax        ; Insert set1 element in union_set
    35 0000004C 83C602                      add si, 2           ; Move to next element in set1
    36 0000004F 83C302                      add bx, 2           ; Move to next spot in union_set
    37 00000052 49                          dec cx              ; Decrement count of elements
    38 00000053 EB19                        jmp check_full
    39                                  
    40                                  set2_less:
    41                                      ; Insert set2 element and move to next
    42 00000055 8917                        mov [bx], dx        ; Insert set2 element in union_set
    43 00000057 83C702                      add di, 2           ; Move to next element in set2
    44 0000005A 83C302                      add bx, 2           ; Move to next spot in union_set
    45 0000005D 49                          dec cx              ; Decrement count of elements
    46 0000005E EB0E                        jmp check_full
    47                                  
    48                                  equal_elements:
    49                                      ; Insert equal element and increment both sets
    50 00000060 8907                        mov [bx], ax        ; Insert element in union_set
    51 00000062 83C602                      add si, 2           ; Move to next element in set1
    52 00000065 83C702                      add di, 2           ; Move to next element in set2
    53 00000068 83C302                      add bx, 2           ; Move to next spot in union_set
    54 0000006B 49                          dec cx              ; Decrement count of elements
    55 0000006C EB00                        jmp check_full
    56                                  
    57                                  check_full:
    58 0000006E 83F900                      cmp cx, 0           ; Check if we've filled all 10 elements
    59 00000071 7426                        je finish
    60 00000073 EBBF                        jmp process_union   ; Continue processing
    61                                  
    62                                  set1_done:
    63                                      ; Copy remaining elements from set2 (if any)
    64 00000075 8B05                        mov ax, [di]
    65 00000077 83F800                      cmp ax, 0
    66 0000007A 741D                        je finish
    67 0000007C 8907                        mov [bx], ax
    68 0000007E 83C702                      add di, 2
    69 00000081 83C302                      add bx, 2
    70 00000084 49                          dec cx
    71 00000085 EBE7                        jmp check_full
    72                                  
    73                                  set2_done:
    74                                      ; Copy remaining elements from set1 (if any)
    75 00000087 8B04                        mov ax, [si]
    76 00000089 83F800                      cmp ax, 0
    77 0000008C 740B                        je finish
    78 0000008E 8907                        mov [bx], ax
    79 00000090 83C602                      add si, 2
    80 00000093 83C302                      add bx, 2
    81 00000096 49                          dec cx
    82 00000097 EBD5                        jmp check_full
    83                                  
    84                                  finish:
    85                                      ; Terminate the union set with zero
    86 00000099 C7070000                    mov word [bx], 0
    87                                  
    88                                      ; End program
    89 0000009D B8004C                      mov ax, 0x4c00
    90 000000A0 CD21                        int 0x21
